package controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import domain.PagingVO;
import handler.PagingHandler;
import serivce.BoardService;
import serivce.BoardServiceImpl;

@WebServlet("/brd/*")
public class boardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
	// 로그 객체 선언
	private static final Logger log = LoggerFactory.getLogger(boardController.class);
	// requestDespatcher 객체
	private RequestDispatcher rdp;
	// destPage : 목적지 주소 저장 변수
	String destPage;
	// isOk
	int isOk;
	// service interface
	private BoardService bsv;

	public boardController() {
		// service class
		bsv = new BoardServiceImpl();
	}

	protected void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// 인코딩, 컨텐츠 타입 설정
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=UTF-8");

		String uri = request.getRequestURI();
		String path = uri.substring(uri.lastIndexOf("/") + 1);

		switch (path) {
		case "register":
			try {
				destPage = "/board/register.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}

			break;
		case "write":
			try {
				String title = request.getParameter("title");
				String writer = request.getParameter("writer");
				String content = request.getParameter("content");
				BoardVO bvo = new BoardVO(title, writer, content);

				isOk = bsv.write(bvo);
				log.info(isOk > 0 ? "OK" : "FAIL");
				destPage = "/index.jsp";

			} catch (Exception e) {
				e.printStackTrace();
			}

			break;
		case "brdList":
			try {
				PagingVO pgv = new PagingVO();

				if (request.getParameter("paginaionNo") != null) {
					pgv.setPaginaionNo(Integer.parseInt(request.getParameter("paginaionNo")));
					pgv.setQty(Integer.parseInt(request.getParameter("qty")));
				}

				// 검색 정보 받기
				pgv.setType(request.getParameter("type"));
				pgv.setKeyword(request.getParameter("keyword"));

				List<BoardVO> list = bsv.getList(pgv);

				int totalCnt = bsv.getBoardTotalCnt(pgv); // 전체 게시글 수 구해오기
				PagingHandler ph = new PagingHandler(pgv, totalCnt);

				request.setAttribute("list", list);
				request.setAttribute("ph", ph);

				log.info("totalCnt >>>>> " + totalCnt);
				log.info("type, keyword>>> " + pgv.getType() + " || " + pgv.getKeyword());
				log.info("PaginaionNo>>>> " + ph.getPgv().getPaginaionNo());
				log.info("pgv>>>>>>> " + ph.getPgv().getPageIndexStart());
				log.info("시작페이지>>>> " + ph.getStartPagination());
				log.info("끝페이지>>>> " + ph.getEndPagination());

				destPage = "/board/boardList.jsp";

			} catch (Exception e) {
				e.printStackTrace();
			}
			break;
		case "boardDetail" :
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				BoardVO bvo = bsv.brdDetail(bno);
				
				request.setAttribute("bvo", bvo);
				destPage="/board/boardDetail.jsp";
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			break;
		case "Modify":// modify.jsp로 이동해서 정보 받기
			
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				//bsv.brdDetail써도 되는데 그렇게하면 수정할 시 조회수가 2개씩 오름
				BoardVO bvo = bsv.getBvoForModify(bno);
				request.setAttribute("bvo", bvo);
				
				destPage="/board/modify.jsp";
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			break;
		case "edit":
			try {
				int bno = Integer.parseInt(request.getParameter("bno"));
				String title = request.getParameter("title");
				String content = request.getParameter("content");
				BoardVO bvo = new BoardVO(bno, title, content);
				
				isOk= bsv.modify(bvo);
				destPage="brdList";
			
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			
			break;

		}

		rdp = request.getRequestDispatcher(destPage);
		rdp.forward(request, response);

	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		service(request, response);
	}

}
